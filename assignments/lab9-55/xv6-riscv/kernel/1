#include "kernel/types.h"
#include "kernel/riscv.h"
#include "kernel/spinlock.h"
#include "kernel/semaphore.h"
#include "kernel/defs.h"

void initsema(struct semaphore* s, int count) {
  s->value = count;
  initlock(&s->lk, "Counting Semaphore");
}

int downsema(struct semaphore* s) {
  acquire(&s->lk);
  while (s->value <=0)
    sleep(s,&s->lk);
  s->value--;
  release(&s->lk);
  return s->value;
}

int upsema(struct semaphore* s) {
  acquire(&s->lk);
  s->value++;
  wakeup(s);
  release(&s->lk);
  return s->value;
}

void initrwsema(struct rwsemaphore *rws)
{
   initsema(&rws->mutex, 1); // Lecture slide page 11 initalises mutex to 1
  
   // Initialise the number of readers, and writers to 0
   rws->nreaders = 0;
   rws->nwriters = 0;
}

// A Reader enters room
int downreadsema(struct rwsemaphore *rws)
{
   downsema(&rws->mutex);
   
   while (rws->nwriters > 0)
   {
      sleep(&rws->mutex, &rws->mutex); // If there is a writer, mutex gets put to sleep
   }

   rws->nreaders++;
   upsema(&rws->mutex); // Unlock mutex
   
   return 0;
}

// A Reader exits room
int upreadsema(struct rwsemaphore *rws)
{
    downsema(&rws->mutex);

    rws->nreaders--;

    if (rws->nreaders == 0 && rws->nwriters > 0)
    {
       upsema(&rws->mutex); // If there is no reader present, mutex gets woken up
    }
    else
    {
       upsema(&rws->mutex);
    }

    return 0;
}

// A Writer enters room
void downwritesema(struct rwsemaphore *rws)
{
   downsema(&rws->mutex);

   while (rws->nreaders > 0 || rws->nwriters > 0)
   {
      sleep(&rws->mutex, &rws->mutex);
   }

   rws->nwriters++;
}

// A writer exits room
void upwritesema(struct rwsemaphore *rws)
{
    rws->nwriters = 0;
    wakeup(&rws->mutex);
    upsema(&rws->mutex);
}
